# 类包含任何类型的通用属性及动作
class Dog():   # 类名称大写, 根据约定, 在Python中, 首字母大写的名称指的是类.
    """模拟狗这个动物类型"""

    # __init__()是一个特殊的方法, 每当你根据Dog类创建新实例时, Python都会自动运行它
    # 这个方法的名称中, 开头和末尾各有两个下划线, 这是一种约定, 旨在避免Python默认方法与普通方法发生名称冲突
    # 三个形参: self、name和age. 形参self必不可少, 还必须位于其他形参的前面
    # 每个与类相关联的方法调用都自动传递实参self,(注: 是每个方法, 不仅仅是默认方法) 
    # 它是一个指向实例本身的引用, 让实例能够访问类中的属性和方法, 相当于Java的this关键字
    # self会自动传递, 因此我们不需要传递它. 每当我们根据Dog类创建实例时, 都只需给最后两个形参(name和age)提供值.
    # 以self为前缀的变量都可供类中的所有方法使用, 还可以通过类的任何实例来访问这些变量. 
    def __init__(self, name, age):
        """初始化小狗的名字及年龄"""
        self.name = name
        self.age = age

    def sit(self):
        """模拟小狗蹲下"""
        print(self.name.title() + '坐下来了!')
    
    def roll_over(self): 
        """模拟小狗打滚"""
        print(self.name.title() + '正在打滚!')

# 根据类创建实例
my_dog = Dog('小八', 6)    # 不需要通过new关键字来创建对象,自动调用__int__方法创建实例
print('我的宠物狗叫' + my_dog.name + '.')    # 直接通过类实例访问属性, 属性没有public/private之分
print('它今年' + str(my_dog.age) + '岁了.')

my_dog.sit()   # 通过实例访问对象方法, 同样方法没有public/private之分
my_dog.roll_over()

your_dog = Dog('lucy', 3)   # 创建另外一个实例对象

# 类的编码规范
# (1) 类名应采用驼峰命名法, 即将类名中的每个单词的首字母都大写, 而不使用下划线. 
# 实例名和模块名都采用小写格式, 并在单词之间加上下划线
# (2) 对于每个类, 都应紧跟在类定义后面包含一个文档字符串. 这种文档字符串简要地描述类的功能, 
# 并遵循编写函数的文档字符串时采用的格式约定. 每个模块也都应包含一个文档字符串, 
# 对其中的类可用于做什么进行描述.  
# (3) 可使用空行来组织代码, 但不要滥用. 在类中, 可使用一个空行来分隔方法;
# 而在模块中, 可使用两个空行来分隔类. 
# (4) 需要同时导入标准库中的模块和你编写的模块时, 先编写导入标准库模块的import语句, 
# 再添加一个空行然后编写导入你自己编写的模块的import语句. 
# 在包含多条import语句的程序中, 这种做法让人更容易明白程序使用的各个模块都来自何方. 